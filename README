
TSM2 Implementation for nVidia Volta GPU Architecture
=====================================================

by Cody Rivera, [insert other collabs here]

This repository contains an implementation of TSM2 as described by
Chen et al. [1]. TSM2 is a parallel matrix-matrix multiplication algorithm 
optimized for tall and skinny matrices: matrices of size (n * n) and (n * k)
where k is much smaller than n. According to experimental data, this algorithm
is faster and utilizes more memory bandwidth than CUBLAS when multiplying tall
and skinny matrices.


This implementation is designed for Unix platforms, and can be built using
'make'. The usage of this program is: 
'./multiply [-d] a.mtx b.mtx c.mtx',
where a.mtx and b.mtx are input matrices and c.mtx is an output matrix.
Note that the optional parameter [-d] indicates that the matrices are 
double precision.

The format of the matrices is binary, with a structure:

template <typename FloatType>
struct matrixFormat
{
    uint32 rows, cols;
    FloatType values[rows * cols];
};

The values are stored in column-major format.
All multibyte values are little-endian.

The setting of parameters t1, t2, and t3 [1] will take place at compile time.

** TODO -- Add CSV export option **


Sources:
--------

[1] Jieyang Chen, Nan Xiong, Xin Liang, Dingwen Tao ∗ , Sihuan Li, Kaiming
Ouyang, Kai Zhao, Nathan DeBardeleben ∗∗ , Qiang Guan ∗∗∗ , Zizhong Chen.
2019. TSM2: Optimizing Tall-and-Skinny Matrix-Matrix Multiplication on
GPUs. In 2019 International Conference on Supercomputing (ICS ’19), June
26–28, 2019, Phoenix, AZ, USA. ACM, New York, NY, USA, 11 pages. https:
//doi.org/10.1145/3330345.3330355



